import random

"""
generates a Bernoulli random variable, which takes the value 1 with probability 𝑝
and the value 0 with probability 1 − 𝑝

Time Complexity -> 𝑂(1)
`random.random()`: generating a random float is 𝑂(1), 
  since it involves a fixed amount of computation irrespective of input size
comparison operation `random.random() < p` and subsequent return statement `1 if random.random() < p else 0` 
are also 𝑂(1)
Both operations involve a single comparison and conditional return, which take a constant amount of time.
Since both the random number generation and the comparison operation take constant time, 
the overall time complexity of the function is 𝑂(1)

Space Complexity -> 𝑂(1)
function does not use any data structures like lists or dictionaries that grow with the input size. 
It only uses a single temporary float (generated by random.random()), which does not depend on the input size.
function does not allocate any memory that persists after the function call. 
The random float and the comparison result are stored in local variables and are discarded once the function returns.
"""


def bernoulli_sample(p):
    return 1 if random.random() < p else 0


prob = 0.7
print(bernoulli_sample(prob))  # Output: 1 or 0 with probability 0.7 or 0.3 respectively
